spring:
  application:
    name: openwms-services
  security:
    user:
      name: user
      password: sa

owms:
  eureka:
    url: ${owms.srv.protocol}://${spring.security.user.name}:${spring.security.user.password}@${owms.srv.hostname}:${server.port}
    zone: ${owms.eureka.url}/eureka/
  srv:
    hostname: localhost
    protocol: http

server:
  port: ${PORT:8761}

# https://medium.com/@fahimfarookme/the-mystery-of-eureka-self-preservation-c7aa0ed1b799
eureka:
  client:
    register-with-eureka: false # default is true
    fetch-registry: false # default is true
    healthcheck:
      enabled: false
    instance-info-replication-interval-seconds: 30 # default is 30
    service-url:
      defaultZone: ${owms.eureka.zone} # Must be camelCase
  server:
    wait-time-in-ms-when-sync-empty: 0 # default is 60000

    # The interval in which the instance eviction task scans for instances with expired leases.
    # Given in milliseconds.
    eviction-interval-timer-in-ms: 60000 # default is 60000

    # Switch off self-preservation. Will turn lease expiration on and evict all instances which no longer sent a heartbeat and whose lease has expired.
    # Self-preservation is desirable for Eureka clusters and where network outages (e.g. between data centers) could be possible.
    # Note: the lease validity / expiration is configured in the Eureka _client_ instances (see eureka.instance.lease-expiration-duration-in-seconds).
    enable-self-preservation: false # default is true

    # Make sure this is set to the same value as the lease renewal interval in Eureka _client_ instances (or slightly higher)
    # This value is relevant for Eureka's calculation of the 'current renewal threshold'.
    # Specifically, the following equation is used: current renewal threshold = (60s / expected-client-renewal-interval-seconds) * renewal-percent-threshold * current number of client instances.
    # In this case:
    # - for one registered client: 60 / 3 * 0.5 * 1 = 10.
    # - for two registered clients: 60 / 3 * 0,5 * 2 = 20.
    # As soon as two clients are connected:
    expected-client-renewal-interval-seconds:  3

    renewal-percent-threshold: 0.49 # default is 0.85
    peer-node-read-timeout-ms: 1000 # default is 200
  instance:
    secure-port-enabled: false
    non-secure-port-enabled: true
    metadata-map:
    # hostname: ${owms.srv.hostname} # to avoid 401 batch update errors
      password: ${spring.security.user.password}
      protocol: ${owms.srv.protocol}
      username: ${spring.security.user.name}
      zone: ${owms.eureka.zone}

management:
  endpoints:
    web:
      exposure:
        include: "prometheus"
  prometheus:
    metrics:
      export:
        enabled: true
  server:
    port: ${MGMTPORT:8990}

---
spring:
  config:
    activate:
      on-profile: SECURED

---
spring:
  config:
    activate:
      on-profile: HEROKU
  main:
    banner-mode: "OFF"

owms:
  srv:
    protocol: https
    hostname: openwms-services.herokuapp.com

eureka:
  server:
    eviction-interval-timer-in-ms: 0
    wait-time-in-ms-when-sync-empty: 0
  client:
    register-with-eureka: false
    fetch-registry: false
    service-url:
      defaultZone: ${owms.eureka.url}/eureka/ # Must be camelCase
  instance:
    secure-port-enabled: true
    non-secure-port-enabled: false
    status-page-url: ${owms.srv.protocol}://${eureka.instance.hostname}:${server.port}/actuator/info
    health-check-url: ${owms.srv.protocol}://${eureka.instance.hostname}:${server.port}/actuator/health
    home-page-url: ${owms.srv.protocol}://${eureka.instance.hostname}:${server.port}/actuator/

